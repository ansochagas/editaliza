{
  "name": "meu-cronograma",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "dev:debug": "nodemon --inspect server.js",
    "test": "jest --detectOpenHandles --forceExit",
    "test:watch": "jest --watch --detectOpenHandles",
    "test:coverage": "jest --coverage --detectOpenHandles --forceExit",
    "test:auth": "jest --testPathPattern=auth --detectOpenHandles --forceExit",
    "lint": "node -e \"console.log('Linting...'); require('fs').readFileSync('server.js', 'utf8'); console.log('✅ No syntax errors found')\"",
    "clean": "node -e \"console.log('Cleaning...'); require('fs').unlinkSync('sessions.db'); console.log('✅ Sessions cleaned')\" 2>/dev/null || echo 'No sessions to clean'",
    "backup": "node -e \"const fs = require('fs'); const date = new Date().toISOString().split('T')[0]; fs.copyFileSync('db.sqlite', 'db_backup_' + date + '.sqlite'); console.log('✅ Database backed up')\"",
    "health": "curl -s http://localhost:3000/health | node -e \"process.stdin.pipe(require('fs').createWriteStream('/dev/null')); console.log('✅ Health check completed')\" 2>/dev/null || echo '❌ Server not running'"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "connect-sqlite3": "^0.9.15",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "express-rate-limit": "^7.3.1",
    "express-session": "^1.17.3",
    "express-validator": "^7.0.1",
    "helmet": "^7.1.0",
    "jsonwebtoken": "^9.0.2",
    "multer": "^2.0.2",
    "sqlite3": "^5.1.7",
    "xss": "^1.0.15"
  },
  "devDependencies": {
    "@types/jest": "^29.5.5",
    "jest": "^29.7.0",
    "jest-extended": "^4.0.2",
    "nodemon": "^3.0.1",
    "supertest": "^6.3.3"
  },
  "jest": {
    "testEnvironment": "node",
    "setupFilesAfterEnv": [
      "<rootDir>/tests/setup.js",
      "<rootDir>/tests/jest-setup.js"
    ],
    "testMatch": [
      "<rootDir>/tests/**/*.test.js"
    ],
    "collectCoverageFrom": [
      "server.js",
      "middleware.js",
      "database.js"
    ],
    "coverageDirectory": "coverage",
    "coverageReporters": [
      "text",
      "lcov",
      "html"
    ],
    "verbose": true
  }
}
